{"ast":null,"code":"import { userMainData, userActivityData, userAverageSessionsData, userPerformanceData } from \"../data/mockData\";\nimport { MainData } from \"./class/MainDataFormat\";\nimport { ActivityData } from \"./class/ActivityDataFormat\";\nimport { PerformanceData } from \"./class/PerfomranceDataFormat\";\nimport { AverageSessionsData } from \"./class/AverageSessionData\";\n\n/**\n * Find id in mocked data then use Class to format Data\n * @param {Number} id \n * @returns \n */\nfunction getUserMainData(id) {\n  const data = userMainData.find(value => value.id.toString() === id);\n  const userMain = new MainData(data);\n  return userMain;\n}\nfunction getUserActivity(id) {\n  const data = userActivityData.find(value => value.userId.toString() === id);\n  const userActivity = new ActivityData(data);\n  return userActivity;\n}\nfunction getUserAverageSessions(id) {\n  const data = userAverageSessionsData.find(value => value.userId.toString() === id);\n  const userSessions = new AverageSessionsData(data);\n  return userSessions;\n  ;\n}\nfunction getUserPerformance(id) {\n  const data = userPerformanceData.find(value => value.userId.toString() === id);\n  const userPerformance = new PerformanceData(data);\n  return userPerformance;\n}\n\n/**\n * Depending category returns requested data\n * @param {Number} id \n * @param {String} categorie \n * @returns \n */\nconst getData = async (id, categorie) => {\n  switch (categorie) {\n    case \"activity\":\n      return getUserActivity(id);\n    case \"average-sessions\":\n      return getUserAverageSessions(id);\n    case \"performance\":\n      return getUserPerformance(id);\n    default:\n      return getUserMainData(id);\n  }\n};\nexport default getData;","map":{"version":3,"names":["userMainData","userActivityData","userAverageSessionsData","userPerformanceData","MainData","ActivityData","PerformanceData","AverageSessionsData","getUserMainData","id","data","find","value","toString","userMain","getUserActivity","userId","userActivity","getUserAverageSessions","userSessions","getUserPerformance","userPerformance","getData","categorie"],"sources":["/Users/maxfrz/Documents/Developer/MyProjects/OCR-Projects/OCR-P12-front-end-dashboard/FrontEnd/src/services/mockFetch.js"],"sourcesContent":["import {userMainData, userActivityData, userAverageSessionsData, userPerformanceData } from \"../data/mockData\"\nimport { MainData } from \"./class/MainDataFormat\";\nimport { ActivityData } from \"./class/ActivityDataFormat\";\nimport { PerformanceData } from \"./class/PerfomranceDataFormat\";\nimport { AverageSessionsData } from \"./class/AverageSessionData\";\n\n/**\n * Find id in mocked data then use Class to format Data\n * @param {Number} id \n * @returns \n */\nfunction getUserMainData(id) {\n    const data = userMainData.find(value => value.id.toString() === id);\n    const userMain = new MainData(data);\n    return userMain;\n}\n\nfunction getUserActivity(id) {\n    const data = userActivityData.find (value => value.userId.toString() === id); \n    const userActivity = new ActivityData(data);\n    return userActivity;\n}\n\nfunction getUserAverageSessions(id) {\n    const data = userAverageSessionsData.find (value => value.userId.toString() === id);\n    const userSessions = new AverageSessionsData(data);\n    return userSessions;\n    ;\n}\nfunction getUserPerformance(id) {\n    const data = userPerformanceData.find (value => value.userId.toString() === id);\n    const userPerformance = new PerformanceData(data);\n    return userPerformance;\n}\n\n/**\n * Depending category returns requested data\n * @param {Number} id \n * @param {String} categorie \n * @returns \n */\nconst getData = async (id, categorie) => {\n    switch (categorie) {\n        case \"activity\": return getUserActivity(id);\n        case \"average-sessions\": return getUserAverageSessions(id);\n        case \"performance\": return getUserPerformance(id);\n\n        default: return getUserMainData(id);\n    }\n}\n\nexport default getData"],"mappings":"AAAA,SAAQA,YAAY,EAAEC,gBAAgB,EAAEC,uBAAuB,EAAEC,mBAAmB,QAAQ,kBAAkB;AAC9G,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,mBAAmB,QAAQ,4BAA4B;;AAEhE;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,EAAE,EAAE;EACzB,MAAMC,IAAI,GAAGV,YAAY,CAACW,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACH,EAAE,CAACI,QAAQ,CAAC,CAAC,KAAKJ,EAAE,CAAC;EACnE,MAAMK,QAAQ,GAAG,IAAIV,QAAQ,CAACM,IAAI,CAAC;EACnC,OAAOI,QAAQ;AACnB;AAEA,SAASC,eAAeA,CAACN,EAAE,EAAE;EACzB,MAAMC,IAAI,GAAGT,gBAAgB,CAACU,IAAI,CAAEC,KAAK,IAAIA,KAAK,CAACI,MAAM,CAACH,QAAQ,CAAC,CAAC,KAAKJ,EAAE,CAAC;EAC5E,MAAMQ,YAAY,GAAG,IAAIZ,YAAY,CAACK,IAAI,CAAC;EAC3C,OAAOO,YAAY;AACvB;AAEA,SAASC,sBAAsBA,CAACT,EAAE,EAAE;EAChC,MAAMC,IAAI,GAAGR,uBAAuB,CAACS,IAAI,CAAEC,KAAK,IAAIA,KAAK,CAACI,MAAM,CAACH,QAAQ,CAAC,CAAC,KAAKJ,EAAE,CAAC;EACnF,MAAMU,YAAY,GAAG,IAAIZ,mBAAmB,CAACG,IAAI,CAAC;EAClD,OAAOS,YAAY;EACnB;AACJ;AACA,SAASC,kBAAkBA,CAACX,EAAE,EAAE;EAC5B,MAAMC,IAAI,GAAGP,mBAAmB,CAACQ,IAAI,CAAEC,KAAK,IAAIA,KAAK,CAACI,MAAM,CAACH,QAAQ,CAAC,CAAC,KAAKJ,EAAE,CAAC;EAC/E,MAAMY,eAAe,GAAG,IAAIf,eAAe,CAACI,IAAI,CAAC;EACjD,OAAOW,eAAe;AAC1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAG,MAAAA,CAAOb,EAAE,EAAEc,SAAS,KAAK;EACrC,QAAQA,SAAS;IACb,KAAK,UAAU;MAAE,OAAOR,eAAe,CAACN,EAAE,CAAC;IAC3C,KAAK,kBAAkB;MAAE,OAAOS,sBAAsB,CAACT,EAAE,CAAC;IAC1D,KAAK,aAAa;MAAE,OAAOW,kBAAkB,CAACX,EAAE,CAAC;IAEjD;MAAS,OAAOD,eAAe,CAACC,EAAE,CAAC;EACvC;AACJ,CAAC;AAED,eAAea,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}